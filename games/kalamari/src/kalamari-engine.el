;;; kalamari-engine --- Kalamari Dominancy: game engine -*- lexical-binding: t; -*-
;;; Commentary:
;;; Code:
;;;; Library imports
(require 'udc)
(require 'kalamari-syms)
(require 'kalamari-state)
(require 'kalamari-battle)

;;;; "Engine" code
(u/gba/arm-toplevel k/syms :interrupt-handler
  (u/gba/claim! 'r2)
  '(mov r0 1) ;; vblank
  (u/gba/arm-set16 k/syms :reg-if 'r0)
  (u/gba/arm-get16 k/syms 'r1 :reg-ifbios)
  '(orr r0 r0 r1)
  (u/gba/arm-set16 k/syms :reg-ifbios 'r0)
  `(bx ,u/gba/arm-lr))

(u/gba/arm-function k/syms :enable-interrupts
  (u/gba/arm-set32 k/syms :reg-intaddr (u/gba/symtab-entry-addr (u/gba/symtab-lookup k/syms :interrupt-handler)))
  (u/gba/arm-set16 k/syms :reg-dispstat #b0000000000001000) ;; turn on vblank interrupt
  (u/gba/arm-set16 k/syms :reg-ie #b0000000000000001) ;; only enable vblank interrupt
  (u/gba/arm-set32 k/syms :reg-ime 1) ;; enable interrupts
  )

(u/gba/thumb-toplevel k/syms :thumb-main
  (u/gba/claim! 'r0 'r1 'r2 'r3)
  (u/gba/thumb-call k/syms :debug-enable)
  (u/gba/thumb-call k/syms :debug-print 14 :data-string-test)
  (u/gba/thumb-call k/syms :hide-all-sprites)
  (u/gba/thumb-bgcnt k/syms 0 :64x64tiles :charblock0 :screenblock28 :8bpp :priority3) ;; tiles
  (u/gba/thumb-bgcnt k/syms 1 :32x32tiles :charblock1 :screenblock27 :8bpp :priority2) ;; battle screen
  (u/gba/thumb-bgcnt k/syms 2 :32x32tiles :charblock2 :screenblock14 :8bpp :priority1) ;; monster images
  (u/gba/thumb-bgcnt k/syms 3 :32x32tiles :charblock3 :screenblock15 :8bpp :priority0) ;; font
  (u/gba/thumb-set16 k/syms (u/gba/sprite-attr1 0) (logior #b0010000000000000 76))
  (u/gba/thumb-set16 k/syms (u/gba/sprite-attr2 0) 116)
  (u/gba/thumb-call k/syms :mode-titlescreen-activate)
  '(b :mainloop)) ;; start the main loop!

(u/gba/arm-toplevel k/syms :main
  (u/gba/claim! 'r0 'r1 'r2 'r3)
  (u/gba/arm-call k/syms :enable-interrupts)
  (u/gba/arm-set16 k/syms :var-keys-last 0) (u/gba/arm-set16 k/syms :var-keys-new 0)
  (u/gba/arm-set32 k/syms :var-rng #xdeadbeef) ;; seed the rng. we advance every frame so it works out
  (let ((r (u/gba/arm-loc k/syms :thumb-main)))
    (u/gba/emit! ;; switch to Thumb
      `(add ,r ,r 1)
      `(bx ,r))))

(u/gba/thumb-toplevel k/syms :mainloop
  (u/gba/thumb-call k/syms :update) ;; update game state
  `(swi #x05) ;; VBlankIntrWait BIOS function, remember to shift in ARM!
  (u/gba/thumb-call k/syms :render) ;; reflect game state in VRAM immediately after vblank
  '(b :mainloop))

;;;; Game logic
(u/gba/thumb-function k/syms :handle-user-input
  (u/gba/claim! 'r0 'r1 'r2 'r3)
  (let ( (r (u/gba/fresh!))
         (mask (u/gba/thumb-fresh-constant #b111111111))
         (new (u/gba/fresh!))
         (last (u/gba/fresh!)))
    (u/gba/thumb-get16 k/syms r :reg-keyinput)
    (u/gba/emit!
      `(mvn ,r ,r)
      `(and ,r ,mask)
      `(mov ,new ,r))
    (u/gba/thumb-get16 k/syms last :var-keys-last)
    (u/gba/emit!
      `(eor ,new ,last)
      `(and ,new ,r))
    (u/gba/thumb-set16 k/syms :var-keys-new new)
    (u/gba/thumb-set16 k/syms :var-keys-last r)))

(defun k/if-pressed (symtab key new f)
  "Generate code that runs the body generated by F is KEY is pressed.
If NEW is non-nil, run the body only if the press started this frame.
SYMTAB is used to lookup the appropriate register address."
  (let ((mask (or (alist-get key u/gba/button-masks) (error "Unknown key: %s" key))))
    (u/gba/emit!
      (u/gba/scope
        (let ( (r (u/gba/fresh!))
               (mr (u/gba/thumb-fresh-constant mask)))
          (u/gba/thumb-get16 symtab r (if new :var-keys-new :var-keys-last))
          ;; (u/gba/thumb-get16 symtab r :reg-keyinput)
          ;; (u/gba/emit! `(mvn ,r ,r))
          (u/gba/emit!
            `(and ,r ,mr))
          (u/gba/emit! `(cmpi ,r 0))
          (u/gba/thumb-if-cond 'ne f))))))

(u/gba/thumb-function k/syms :update
  (u/gba/claim! 'r0 'r1 'r2 'r3)
  (u/gba/thumb-call k/syms :random)
  (u/gba/thumb-call k/syms :handle-user-input)
  (let ((mode (u/gba/fresh!)))
    (u/gba/thumb-get32 k/syms mode :var-mode)
    (u/gba/emit! `(cmpi ,mode ,k/MODE-TITLESCREEN))
    (u/gba/thumb-if-cond 'eq (lambda () (u/gba/thumb-call k/syms :mode-titlescreen-update)))
    (u/gba/emit! `(cmpi ,mode ,k/MODE-GAME))
    (u/gba/thumb-if-cond 'eq (lambda () (u/gba/thumb-call k/syms :mode-game-update)))
    (u/gba/emit! `(cmpi ,mode ,k/MODE-GAMEOVER))
    (u/gba/thumb-if-cond 'eq (lambda () (u/gba/thumb-call k/syms :mode-gameover-update)))))

(u/gba/thumb-function k/syms :render
  (u/gba/claim! 'r0 'r1 'r2 'r3)
  (let ((mode (u/gba/fresh!)))
    (u/gba/thumb-get32 k/syms mode :var-mode)
    (u/gba/emit! `(cmpi ,mode ,k/MODE-GAME))
    (u/gba/thumb-if-cond 'eq (lambda () (u/gba/thumb-call k/syms :mode-game-render)))))
  
(provide 'kalamari-engine)
;;; kalamari-engine.el ends here
